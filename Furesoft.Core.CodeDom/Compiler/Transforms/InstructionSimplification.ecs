#importMacros(FlameMacros);

using System;
using System.Collections.Generic;
using System.Linq;
using Flame.Constants;
using Flame.Compiler.Analysis;
using Flame.Compiler.Instructions;
using Flame.TypeSystem;

namespace Flame.Compiler.Transforms
{
    /// <summary>
    /// Looks for transforms that simplify instructions.
    /// </summary>
    public #rewriteRuleAnalysis(InstructionSimplificationAnalysis, {
        // Nop casts can be replaced by copies.
        #rule({
            result = intrinsic("arith.convert", T, #(T))(value);
        }, {
            result = copy(T)(value);
        });

        // The 'unbox_any' intrinsic can be replaced with its implementation
        // if we know for sure that the target type is a value type.
        #rule({
            result = intrinsic("object.unbox_any", To, #(From))(value);
        }, {
            box_contents_ptr = unbox(To)(value);
            result = load(To, false, Alignment.NaturallyAligned)(box_contents_ptr);
        }, !(To is IGenericParameter) && !(To is PointerType));

        // A sign or zero extension followed by a truncation or extension can be
        // simplified to either an extension or a truncation.
        #rule({
            temp_cast = intrinsic("arith.convert", Intermediate, #(From))(value);
            result = intrinsic("arith.convert", To, #(Intermediate))(temp_cast);
        }, {
            result = intrinsic("arith.convert", To, #(From))(value);
        }, InstructionSimplification.IsSignOrZeroExt(From, Intermediate)
            && (InstructionSimplification.IsTruncation(From, To)
                || (InstructionSimplification.IsSignExt(From, To) && InstructionSimplification.IsSignExt(From, Intermediate))
                || (InstructionSimplification.IsZeroExt(From, To) && InstructionSimplification.IsZeroExt(From, Intermediate))));

        // Some checked conversions always succeed.
        #rule({
            result = intrinsic("arith.checked.convert", To, #(From))(value);
        }, {
            result = intrinsic("arith.convert", To, #(From))(value);
        }, InstructionSimplification.CanAlwaysConvert(From, To));

        // Some conversions followed by checked conversions also always succeed.
        #rule({
            temp_cast = intrinsic("arith.convert", Intermediate, #(From))(value);
            result = intrinsic("arith.checked.convert", To, #(Intermediate))(temp_cast);
        }, {
            result = intrinsic("arith.convert", To, #(From))(value);
        }, InstructionSimplification.CanAlwaysConvert(From, Intermediate)
            && InstructionSimplification.CanAlwaysConvert(From, To));

        // Multiplication by two is equivalent to adding something
        // to itself.
        #rule({
            two = constant(c, TConst)();
            result = intrinsic("arith.mul", T, #(T, TConst))(a, two);
        }, {
            result = intrinsic("arith.add", T, #(T, T))(a, a);
        }, T.IsIntegerType() && c is IntegerConstant && c.Equals(new IntegerConstant(2).Cast(((IntegerConstant)c).Spec)));

        // The default value for integers is zero.
        #rule({
            c = constant(#default, TConst)();
        }, {
            c = constant(new IntegerConstant(0).Cast(TConst.GetIntegerSpecOrNull()), TConst)();
        }, TConst.IsIntegerType());

        // The default value for pointers is null.
        #rule({
            c = constant(#default, TConst)();
        }, {
            c = constant(#null, TConst)();
        }, TConst is PointerType);

        // Delete nop reinterpret casts.
        #rule({
            cast = reinterpret_cast(T)(value);
        }, {
            cast = copy(T)(value);
        }, graph.GetValueType(value) == T);

        // Reduce dynamic casts to reinterpret casts if possible.
        #rule({
            cast = dynamic_cast(T)(value);
        }, {
            cast = reinterpret_cast(T)(value);
        }, graph.GetAnalysisResult<SubtypingRules>().IsSubtypeOf(graph.GetValueType(value), T) == ImpreciseBoolean.True);

        // Reduce dynamic casts to null if possible.
        #rule({
            cast = dynamic_cast(T)(value);
        }, {
            cast = constant(#null, T)();
        }, graph.GetAnalysisResult<SubtypingRules>().IsSubtypeOf(graph.GetValueType(value), T) == ImpreciseBoolean.False);

        // Reduce 'unbox_any' intrinsics to reinterpret casts if possible.
        #rule({
            cast = intrinsic("object.unbox_any", To, #(From))(value);
        }, {
            cast = reinterpret_cast((PointerType)To)(value);
        }, To is PointerType && graph.GetAnalysisResult<SubtypingRules>().IsSubtypeOf(From, To) == ImpreciseBoolean.True);

        // Cut out the middle man for reinterpret casts.
        #rule({
            middle_man = reinterpret_cast(T1)(value);
            use = reinterpret_cast(T2)(middle_man);
        }, {
            use = reinterpret_cast(T2)(value);
        });

        // Cut out the middle man for reinterpret/dynamic casts.
        #rule({
            middle_man = reinterpret_cast(T1)(value);
            use = dynamic_cast(T2)(middle_man);
        }, {
            use = dynamic_cast(T2)(value);
        });

        // Turn indirect calls into direct calls.
        #rule({
            callee = new_delegate(TDelegate, method, has_this, lookup)(...this_value);
            result = indirect_call(TRet, TParams)(callee, ...args);
        }, {
            result = call(method, lookup)(...this_value, ...args);
        });

        // Propagate known array lengths.
        #rule({
            array = intrinsic("array.new_array", TArray, #(TLength))(length);
            result = intrinsic("array.get_length", TLength, #(TArray))(array);
        }, {
            result = copy(TLength)(length);
        });
    });

    /// <summary>
    /// An intraprocedural transform that greedily applies instruction
    /// simplifications.
    /// </summary>
    public sealed class InstructionSimplification : IntraproceduralOptimization
    {
        private InstructionSimplification()
        { }

        /// <summary>
        /// An instance of the instruction simplification transform.
        /// </summary>
        public static readonly InstructionSimplification Instance = new InstructionSimplification();

        /// <inheritdoc/>
        public override FlowGraph Apply(FlowGraph graph)
        {
            var builder = graph.ToBuilder();
            if (!builder.HasAnalysisFor<InstructionSimplificationAnalysis.Results>())
            {
                builder.AddAnalysis(new InstructionSimplificationAnalysis());
            }

            while (true)
            {
                var transforms = builder.GetAnalysisResult<InstructionSimplificationAnalysis.Results>();
                if (transforms.ApplicableRules.Count == 0)
                {
                    return builder.ToImmutable();
                }
                else
                {
                    transforms.ApplicableRules[0].Apply(builder);
                }
            }
        }

        /// <summary>
        /// Tells if a particular type can always be converted to another type,
        /// that is, if a checked conversion <paramref name="from"/> to <paramref name="to"/>
        /// will never throw.
        /// </summary>
        /// <param name="from">The type of the values to convert.</param>
        /// <param name="to">A target type to convert values to.</param>
        /// <returns>
        /// <c>true</c> if all values of type <paramref name="from"/> can be
        /// safely converted to values of type <paramref name="to"/>; otherwise <c>false</c>.
        /// </returns>
        public static bool CanAlwaysConvert(IType from, IType to)
        {
            return CheckIntTypePredicate(
                from,
                to,
                (fromSpec, toSpec) =>
                    (toSpec.Size >= fromSpec.Size && fromSpec.IsSigned == toSpec.IsSigned)
                    || (toSpec.Size > fromSpec.Size && toSpec.IsSigned));
        }

        internal static bool IsTruncation(IType from, IType to)
        {
            return CheckIntTypePredicate(
                from,
                to,
                (fromSpec, toSpec) => fromSpec.Size >= toSpec.Size);
        }

        internal static bool IsSignOrZeroExt(IType from, IType to)
        {
            return CheckIntTypePredicate(
                from,
                to,
                (fromSpec, toSpec) => fromSpec.Size <= toSpec.Size);
        }

        internal static bool IsSignExt(IType from, IType to)
        {
            return CheckIntTypePredicate(
                from,
                to,
                (fromSpec, toSpec) => fromSpec.Size <= toSpec.Size && fromSpec.IsSigned);
        }

        internal static bool IsZeroExt(IType from, IType to)
        {
            return CheckIntTypePredicate(
                from,
                to,
                (fromSpec, toSpec) => fromSpec.Size <= toSpec.Size && !fromSpec.IsSigned);
        }

        private static bool CheckIntTypePredicate(IType from, IType to, Func<IntegerSpec, IntegerSpec, bool> predicate)
        {
            var fromSpec = from.GetIntegerSpecOrNull();
            var toSpec = to.GetIntegerSpecOrNull();
            if (fromSpec != null && toSpec != null)
            {
                return predicate(fromSpec, toSpec);
            }
            else
            {
                return false;
            }
        }
    }
}
